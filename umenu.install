<?php

use MakinaCorpus\PluSQL\Constraint;

/**
 * Implements hook_schema().
 */
function umenu_schema() {
  $schema = [];

  $schema['umenu'] = [
    'description' => 'Holds definitions for top-level custom menus (for example, Main menu).',
    'fields' => [
      'id' => [
        'description' => 'Internal primary key',
        'type'        => 'serial',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'site_id' => [
        'description' => 'Site identifier',
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => false,
        'default'     => null,
      ],
      'is_main' => [
        'description' => 'Is this menu the main menu for the given site',
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
        'default'     => 0,
      ],
      'role' => [
        'description' => 'Menu role, for business layer this could mean anything',
        'type'        => 'varchar',
        'length'      => 64,
        'not null'    => false,
        'default'     => null,
      ],
      'name' => [
        'description' => 'Primary Key: Unique key for menu. This is used as a block delta so length is 32',
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => true,
      ],
      'title' => [
        'description' => 'Menu title; displayed at top of block',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => true,
      ],
      'description' => [
        'description' => 'Menu description',
        'type'        => 'text',
        'not null'    => false,
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      'uk_umenu_name' => ['name'],
    ],
    'foreign keys' => [
      'item_site' => [
        'table'   => 'ucms_site',
        'columns' => ['site_id' => 'id'],
        'delete'  => 'cascade',
      ],
    ],
  ];

  $schema['umenu_item'] = [
    'description' => 'Holds menu items',
    'fields' => [
      'id' => [
        'description' => 'Primary key',
        'type'        => 'serial',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'menu_id' => [
        'description' => 'Menu identifier',
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'site_id' => [
        'description' => 'Site identifier denormalization, used for foreign key constraints',
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => false,
        'default'     => null,
      ],
      'node_id' => [
        'description' => 'Node (content) identifier',
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => false,
      ],
      'parent_id' => [
        'description' => 'Parent identifier refering to this table primary key',
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => false,
        'default'     => null,
      ],
      'weight' => [
        'description' => 'Menu item order relative to its parent',
        'type'        => 'int',
        'unsigned'    => false,
        'not null'    => true,
        'default'     => 0,
      ],
      'title' => [
        'description' => 'Menu item title, used for display, content title is used if null',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => false,
        'default'     => null,
      ],
      'description' => [
        'description' => 'Menu item description, may be used for display.',
        'type'        => 'text',
        'not null'    => false,
        'default'     => null,
      ],
      'url' => [
        'description' => 'Link to use, note that will override the node one if any',
        'type'        => 'text',
        'not null'    => false,
        'default'     => null,
      ],
    ],
    'primary key' => ['id'],
    'foreign keys' => [
      'item_menu' => [
        'table'   => 'umenu',
        'columns' => ['menu_id' => 'id'],
        'delete'  => 'cascade',
      ],
      'item_parent' => [
        'table'   => 'umenu_item',
        'columns' => ['parent_id' => 'id'],
        'delete'  => 'set null',
      ],
      'item_node_site' => [
        'table'   => 'ucms_site_node',
        'columns' => [
          'site_id' => 'site_id',
          'node_id' => 'nid',
        ],
        'delete'  => 'cascade',
      ],
    ]
  ];

  return $schema;
}

/**
 * Insert default Drupal menu because they are hardcoded in too many places.
 */
function umenu_install_default_menus() {
  foreach (['main-menu', 'management', 'navigation', 'user-menu'] as $name) {
    // FIXME: title should be the one from Drupal core
    db_merge('umenu')->key(['name' => $name, 'title' => $name])->execute();
  }
}

/**
 * Implements hook_install().
 */
function umenu_install() {
  umenu_install_default_menus();
}

/**
 * Insert default Drupal menu because they are hardcoded in too many places.
 */
function umenu_update_7002() {
  umenu_install_default_menus();
}

/**
 * Update schema.
 */
function umenu_update_7003() {

  module_enable(['plusql']);

  if (!db_table_exists('umenu') || !db_field_exists('umenu', 'id')) {

    // We need to drop the foreign key constraint
    if (db_constraint_exists_unsafe('menu_links', Constraint::FOREIGN_KEY, 'fk_menu_links_menu')) {
      db_constraint_drop_unsafe('menu_links', Constraint::FOREIGN_KEY, 'fk_menu_links_menu');
    }

    // Drop and recreate table by selecting all data into another table.
    // If we already have the table, it means a previous attempt failed
    // we must keep all data.
    if (!db_table_exists('umenu_backup_umenu')) {
      db_query("CREATE TABLE {umenu_backup_umenu} AS SELECT * FROM {umenu}");
    }
    if (db_table_exists('umenu')) {
      db_drop_table('umenu');
    }
    db_create_table('umenu', drupal_get_schema_unprocessed('umenu', 'umenu'));
    db_query("INSERT INTO {umenu} (name, title, description, site_id) SELECT name, title, description, site_id FROM {umenu_backup_umenu}");
  }

  // Ensure once again constraints
  db_constraint_add_all('umenu', drupal_get_schema('umenu'));

  if (!db_table_exists('umenu_item')) {
    db_create_table('umenu_item', drupal_get_schema_unprocessed('umenu', 'umenu_item'));
  }

  db_constraint_fix('umenu');
}

/**
 * Adds missing {umenu_item}.weight column.
 */
function umenu_update_7004() {
  if (!db_field_exists('umenu_item', 'weight')) {
    db_add_field('umenu_item', 'weight', [
      'description' => 'Menu item order relative to its parent',
      'type'        => 'int',
      'unsigned'    => false,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
}

/**
 * Adds missing {umenu}.is_main column.
 */
function umenu_update_7005() {
  if (!db_field_exists('umenu', 'is_main')) {
    db_add_field('umenu', 'is_main', [
      'description' => 'Is this menu the main menu for the given site',
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
      'default'     => 0,
    ]);
  }
}

/**
 * Adds missing {umenu}.role column.
 */
function umenu_update_7006() {
  if (!db_field_exists('umenu', 'role')) {
    db_add_field('umenu', 'role', [
      'description' => 'Menu role, for business layer this could mean anything',
      'type'        => 'varchar',
      'length'      => 64,
      'not null'    => false,
      'default'     => null,
    ]);
  }
}

/**
 * Fixes {umenu_item}.site_id column.
 */
function umenu_update_7008() {
  db_change_field('umenu_item', 'site_id', 'site_id', [
    'description' => 'Site identifier denormalization, used for foreign key constraints',
    'type'        => 'int',
    'unsigned'    => true,
    'not null'    => false,
    'default'     => null,
  ]);
}

/**
 * Update schema.
 */
function umenu_update_7009() {
  db_constraint_fix('umenu');
}

/**
 * Adds the {umenu_item}.url column and set the {umenu_item}.node_id nullable.
 */
function umenu_update_7012() {
  db_change_field('umenu_item', 'node_id', 'node_id', [
    'description' => 'Node (content) identifier',
    'type'        => 'int',
    'unsigned'    => true,
    'not null'    => false,
  ]);
  if (!db_field_exists('umenu_item', 'url')) {
    db_add_field('umenu_item', 'url', [
      'description' => 'Link to use, note that will override the node one if any',
      'type'        => 'text',
      'not null'    => false,
      'default'     => null,
    ]);
  }
}

